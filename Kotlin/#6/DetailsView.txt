package com.example.oneentry.view

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Slider
import androidx.compose.material.SliderDefaults
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.AsyncImage
import com.example.oneentry.Screen
import com.example.oneentry.item.ProductItemSmall
import com.example.oneentry.model.ItemsModel
import com.example.oneentry.ui.theme.Lato
import com.example.oneentry.ui.theme.grey
import com.example.oneentry.ui.theme.greyLight
import com.example.oneentry.ui.theme.greyTabs
import com.example.oneentry.ui.theme.orange
import com.example.oneentry.ui.theme.yellow
import com.example.oneentry.viewModel.MainViewModel
import kotlin.math.roundToInt

@Composable
fun DetailsView(
    item: ItemsModel,
    mainViewModel: MainViewModel,
    navController: NavController
) {

    BoxWithConstraints(
        modifier = Modifier
            .fillMaxSize()
            .background(orange)
    ) {

        val maxHeight = this.maxHeight

        val topHeight: Dp = maxHeight / 3
        val bottomHeight: Dp = maxHeight * 2 / 3

        val centerHeight = 30.dp

        val centerPaddingBottom = topHeight - centerHeight / 2

        Top(
            item = item,
            modifier = Modifier
                .fillMaxWidth()
                .height(topHeight)
        )

        Bottom(
            item = item,
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp))
                .align(Alignment.BottomCenter)
                .height(bottomHeight),
            mainViewModel = mainViewModel,
            navController = navController
        )

        Text(
            modifier = Modifier
                .offset(x = 280.dp, y = centerPaddingBottom - 10.dp)
                .background(
                    color = yellow,
                    shape = RoundedCornerShape(30.dp)
                )
                .padding(15.dp),
            text = item.attributeValues.first()["en_US"]!![3].grade.toString(),
            color = Color.Black,
            fontFamily = Lato,
            fontWeight = FontWeight.Bold,
            fontSize = 20.sp
        )
    }
}

@Composable
private fun Top(
    item: ItemsModel,
    modifier: Modifier,
) {
    Column(
        modifier = modifier
            .background(orange),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {

        AsyncImage(
            model = item.attributeValues.first()["en_US"]!![2].image[0].downloadLink,
            contentDescription = null,
            modifier = Modifier
                .size(170.dp)
        )
    }
}

@Composable
private fun Bottom(
    item: ItemsModel,
    modifier: Modifier,
    mainViewModel: MainViewModel,
    navController: NavController
) {

    var sliderPosition: Float by remember { mutableStateOf(0f) }

    Column(
        modifier = modifier
            .background(Color.White)
            .verticalScroll(rememberScrollState())
    ) {

        Text(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 20.dp)
                .padding(horizontal = 20.dp)
                .padding(start = 5.dp),
            text = item.attributeValues.first()["en_US"]!![1].title.toString(),
            color = Color.Black,
            fontFamily = Lato,
            fontWeight = FontWeight.Bold,
            fontSize = 24.sp
        )

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

            Slider(
                modifier = Modifier.fillMaxWidth(0.8f),
                value = sliderPosition,
                onValueChange = { sliderPosition = it.roundToInt().toFloat() },
                valueRange = 0f..3f,
                onValueChangeFinished = {

                },
                colors = SliderDefaults.colors(
                    thumbColor = orange,
                    activeTrackColor = orange,
                    inactiveTrackColor = greyTabs
                )
            )

            Row(
                modifier = Modifier.fillMaxWidth(0.8f),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {

                Text(
                    text = "Small",
                    color = greyLight,
                    fontFamily = Lato,
                    fontWeight = FontWeight.Normal,
                    fontSize = 11.sp
                )

                Text(
                    text = "Medium",
                    color = greyLight,
                    fontFamily = Lato,
                    fontWeight = FontWeight.Normal,
                    fontSize = 11.sp
                )

                Text(
                    text = "Large",
                    color = greyLight,
                    fontFamily = Lato,
                    fontWeight = FontWeight.Normal,
                    fontSize = 11.sp
                )

                Text(
                    text = "Xtra Large",
                    color = greyLight,
                    fontFamily = Lato,
                    fontWeight = FontWeight.Normal,
                    fontSize = 11.sp
                )
            }
        }

        Spacer(modifier = Modifier.padding(20.dp))

        Text(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 20.dp)
                .padding(horizontal = 20.dp)
                .padding(start = 5.dp),
            text = "Price: ${item.attributeValues.first()["en_US"]!![0].price.toString()} $",
            color = Color.Black,
            fontFamily = Lato,
            fontWeight = FontWeight.Bold,
            fontSize = 21.sp
        )

        Spacer(modifier = Modifier.padding(40.dp))

        mainViewModel.getRelatedProduct(item.id)
        val productRelated by mainViewModel.relatedProduct.collectAsState()

        productRelated?.let {

            Text(
                modifier = Modifier.padding(horizontal = 20.dp),
                text = "Related products: ",
                color = grey,
                fontSize = 20.sp,
                fontFamily = Lato,
                fontWeight = FontWeight.Bold
            )

            Row {

                it.items.forEach { item ->

                    ProductItemSmall(item = item) {

                        navController.navigate(route = Screen.DetailsScreen.route + "/${item.id}")
                    }
                }
            }
        }
    }
}