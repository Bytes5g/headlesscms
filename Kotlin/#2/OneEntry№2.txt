implementation "androidx.navigation:navigation-compose:2.5.3"
implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
implementation 'io.coil-kt:coil-compose:2.4.0'

sealed class Screen(val route: String) {

    object HomeScreen: Screen(route = "home_screen")
}

@Composable
fun SetupNavigationGraph(
    navController: NavHostController,
    mainViewModel: MainViewModel
) {

    mainViewModel.getProducts()
    val products by mainViewModel.products.collectAsState()

    NavHost(
        navController = navController,
        startDestination = Screen.HomeScreen.route
    ) {

        composable(
            route = Screen.HomeScreen.route
        ) {

            HomeView(
                products = products
            )
        }
    }
}

class MainActivity : ComponentActivity() {

    private lateinit var navigationController: NavHostController

    @OptIn(ExperimentalMaterial3Api::class)
    @SuppressLint("CoroutineCreationDuringComposition")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {

            navigationController = rememberNavController()
            val mainViewModel = hiltViewModel<MainViewModel>()

            OneEntryTheme {

                Scaffold {

                    Box(modifier = Modifier.padding(it)) {

                        SetupNavigationGraph(navController = navigationController, mainViewModel = mainViewModel)
                    }
                }
            }
        }
    }
}

data class ProductModel(
    val items: List<ItemsModel>,
    val total: Int
)

data class ItemsModel(
    val id: Int,
    val attributeValues: List<AttributeModel>
)

data class AttributeModel(
    val price: String? = null,
    val tit: String? = null,
    val image: List<ImageModel>,
    val grade: String? = null
)

data class ImageModel(
    val downloadLink: String
)

suspend fun getProducts(pageUrl: String): ProductModel {

            val response = client.get("$domain/products/page/url/$pageUrl?limit=30&offset=0") {

                contentType(ContentType.Application.Json)
            }

            return gson.fromJson(response.bodyAsText(), ProductModel::class.java)
        }

class MainViewModel: ViewModel() {

    private val _menus = MutableStateFlow<MenuModel?>(null)

    private val _products = MutableStateFlow<ProductModel?>(null)
    val products = _products.asStateFlow()

    fun getProducts() {

        viewModelScope.launch {

            try {

                _menus.value = OneEntryProvider.getMenu("categories")
                _menus.value?.let {

                    val pageUrl = it.pages.first().pageUrl
                    _products.value = OneEntryProvider.getProducts(pageUrl)
                }
            } catch (error: Exception) {

                Log.e("ViewModel Error", error.toString())
            }
        }
    }
}

