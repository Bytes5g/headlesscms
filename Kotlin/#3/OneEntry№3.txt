implementation 'androidx.paging:paging-compose:3.2.0'

suspend fun getProducts(pageUrl: String, limit: Int, offset: Int): ProductModel {

	val response = client.get("$domain/products/page/url/$pageUrl?limit=$limit&offset=$offset") {

		contentType(ContentType.Application.Json)
	}

	return gson.fromJson(response.bodyAsText(), ProductModel::class.java)
}

class ProductsPagingSource(mainViewModel: MainViewModel): PagingSource<Int, ProductModel>() {

    private val limit = 30
    private var total = 0
    private val pageUrl = mainViewModel.pageUrl.value

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, ProductModel> {

        return try {

            val currentPage = params.key ?: 0
            val response = OneEntryProvider.getProducts(pageUrl, limit, currentPage)
            total = response.total
            val data = mutableListOf<ProductModel>()

            data.addAll(listOf(response))

            LoadResult.Page(
                data = data,
                prevKey = null,
                nextKey = if (currentPage * limit <= total) currentPage.plus(1) else throw Exception("End pagination")
            )
        } catch (error: Exception) {

            LoadResult.Error(error)
        }
    }

    override fun getRefreshKey(state: PagingState<Int, ProductModel>): Int? {

        return null
    }
}

class MainViewModel: ViewModel() {

    private val _menus = MutableStateFlow<MenuModel?>(null)

    private val _pageUrl = MutableStateFlow("heroes")
    val pageUrl = _pageUrl.asStateFlow()

    val products = Pager(PagingConfig(pageSize = 1)) {
        ProductsPagingSource(this)
    }.flow.cachedIn(viewModelScope)

    fun getProducts() {

        viewModelScope.launch {

            try {

                _menus.value = OneEntryProvider.getMenu("categories")
                _menus.value?.let {

                    _pageUrl.value = it.pages.first().pageUrl
                }
            } catch (error: Exception) {

                Log.e("ViewModel Error", error.toString())
            }
        }
    }
}

@Composable
fun SetupNavigationGraph(
    navController: NavHostController,
    mainViewModel: MainViewModel
) {

    mainViewModel.getProducts()
    val products = mainViewModel.products.collectAsLazyPagingItems()

    NavHost(
        navController = navController,
        startDestination = Screen.HomeScreen.route
    ) {

        composable(
            route = Screen.HomeScreen.route
        ) {

            HomeView(
                products = products
            )
        }
    }
}

if (products.loadState.refresh is LoadState.Loading) {

	CircularProgressIndicator(
		modifier = Modifier.padding(top = (height/2).dp),
		color = orange
	)
} else {

	Column(
		verticalArrangement = Arrangement.Center
	) {

		products.itemSnapshotList.items.forEach { product ->

			product.items.forEach { item ->

				ProductItemSmall(item = item)
			}
		}
	}
}